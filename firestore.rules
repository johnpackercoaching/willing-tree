rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow authenticated users to read/write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow authenticated users to read/write innermosts they're part of
    match /innermosts/{innermostId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.partnerA || 
         request.auth.uid == resource.data.partnerB);
      allow write: if request.auth != null && 
        (request.auth.uid == resource.data.partnerA || 
         request.auth.uid == resource.data.partnerB ||
         request.auth.uid == request.resource.data.partnerA || 
         request.auth.uid == request.resource.data.partnerB);
    }
    
    // Allow authenticated users to read/write willing boxes they're part of
    match /willingBoxes/{boxId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.partnerA || 
         request.auth.uid == resource.data.partnerB);
      allow write: if request.auth != null && 
        (request.auth.uid == resource.data.partnerA || 
         request.auth.uid == resource.data.partnerB);
    }
    
    // Allow authenticated users to read/write their pairing invitations
    match /pairingInvitations/{inviteId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.senderId || 
         request.auth.email == resource.data.recipientEmail);
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.senderId;
      allow update: if request.auth != null && 
        request.auth.email == resource.data.recipientEmail;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.senderId;
    }
  }
}